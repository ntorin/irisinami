'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.readAttrs = readAttrs;
exports.readStyles = readStyles;
exports.getAllChildren = getAllChildren;
exports.getPathAttributes = getPathAttributes;
exports.getPaths = getPaths;
exports['default'] = extractSvgPaths;

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _PathConverter = require('./PathConverter');

var PathConverter = _interopRequireWildcard(_PathConverter);

function readAttrs(node) {
    var attrs = {};
    var i = 0;
    var len = node.attributes.length;
    for (; i < len; i++) {
        var att = node.attributes[i];
        var _name = att.name.toLowerCase();
        if (att.specified) {
            switch (_name) {
                case 'fill':
                case 'fill-opacity':
                case 'opacity':
                case 'stroke':
                case 'stroke-opacity':
                case 'stroke-width':
                    attrs[_name] = att.value;
            }
        }
    }
    return attrs;
}

function readStyles(node) {
    var style = {};
    var i = 0;
    var len = node.style.length;
    for (; i < len; i++) {
        var styleName = node.style[i];
        switch (styleName) {
            case 'fill':
            case 'fill-opacity':
            case 'opacity':
            case 'stroke':
            case 'stroke-opacity':
            case 'stroke-width':
                style[styleName] = node.style[styleName];
        }
    }
    return style;
}

function getAllChildren(node) {
    var i = 0;
    var els = [node];
    var len = node.childNodes.length;
    for (; i < len; i++) {
        var el = node.childNodes[i];
        els.push(el);
        if (el.childNodes.length > 0) {
            els = els.concat(getAllChildren(el));
        }
    }

    return els;
}

function getPathAttributes(node, defaultItem) {
    var item = _extends({
        trans: {
            rotate: [0, 0, 0]
        },
        transStr: 'rotate(0, 0, 0)'
    }, defaultItem);

    var nodeName = node.nodeName.toUpperCase();
    var allAttrs = {};
    var i = 0;
    var len = node.attributes.length;
    for (; i < len; i++) {
        var att = node.attributes[i];
        var _name2 = att.name.toLowerCase();
        allAttrs[_name2] = att.value;
    }
    switch (nodeName) {
        case 'PATH':
            item.path = allAttrs.d;
            break;
        case 'CIRCLE':
            item.path = PathConverter.fromCircle(allAttrs);
            break;
        case 'ELLIPSE':
            item.path = PathConverter.fromEllipse(allAttrs);
            break;
        case 'RECT':
            item.path = PathConverter.fromRect(allAttrs);
            break;
        case 'POLYGON':
            item.path = PathConverter.fromPolygon(allAttrs);
            break;
        case 'LINE':
            item.path = PathConverter.fromLine(allAttrs);
            break;
        default:
            return false;
    }
    var attrs = readAttrs(node);
    var style = readStyles(node);
    item.attrs = _extends({}, item.attrs, attrs);
    item.style = _extends({}, item.style, style);
    return item;
}

function getPaths(nodes, defaultItem) {
    var paths = [];
    nodes.forEach(function (node) {
        var path = getPathAttributes(node, defaultItem);
        if (path) {
            paths.push(path);
        }
    });
    return paths;
}

function extractSvgPaths(svg) {
    var children = getAllChildren(svg);
    var defaultItem = {
        attrs: {},
        styles: {}
    };
    children.forEach(function (child) {
        if (child.nodeName.toUpperCase() !== 'SVG') {
            return false;
        }
        defaultItem = {
            attrs: readAttrs(child),
            styles: readStyles(child)
        };
    });

    return getPaths(children, defaultItem);
}